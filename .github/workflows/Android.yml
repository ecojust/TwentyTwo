name: Android
on:
  push:
    branches: [master]
  workflow_dispatch:

jobs:
  release:
    permissions:
      contents: write
      actions: write
      attestations: write
      deployments: write
      packages: write
      id-token: write
    strategy:
      matrix:
        include:
          - platform: "ubuntu-22.04"
            args: "--target armv7" # 使用正确的目标架构名称

    runs-on: ${{ matrix.platform }}

    steps:
      # Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 获取完整历史以便正确生成版本号

      # Rust setup
      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: armv7-linux-androideabi,aarch64-linux-android

      # 添加 OpenSSL 交叉编译配置
      - name: Setup OpenSSL for cross-compilation
        run: |
          # 安装 pkg-config
          sudo apt-get install -y pkg-config

          # 安装完整的 OpenSSL 开发包
          sudo apt-get install -y libssl-dev

          # 确认 OpenSSL 头文件位置
          ls -la /usr/include/openssl/

          # 设置交叉编译环境变量
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV

          # 使用系统提供的 OpenSSL
          echo "OPENSSL_DIR=/usr" >> $GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=/usr/include" >> $GITHUB_ENV
          echo "OPENSSL_LIB_DIR=/usr/lib/x86_64-linux-gnu" >> $GITHUB_ENV

          # 为 Rust 配置 OpenSSL 静态链接
          echo "OPENSSL_STATIC=1" >> $GITHUB_ENV

          # 禁用 pkg-config 以便使用环境变量
          echo "OPENSSL_NO_PKG_CONFIG=1" >> $GITHUB_ENV

          # 创建符号链接确保头文件可以被找到
          sudo ln -sf /usr/include/x86_64-linux-gnu/openssl/opensslconf.h /usr/include/openssl/
          sudo ln -sf /usr/include/x86_64-linux-gnu/openssl/configuration.h /usr/include/openssl/ || true

          # 创建 .cargo/config.toml 文件来配置 Rust 交叉编译
          mkdir -p ~/.cargo
          cat > ~/.cargo/config.toml << 'EOF'
          [target.armv7-linux-androideabi]
          linker = "/usr/local/lib/android/sdk/ndk/25.1.8937393/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi24-clang"
          ar = "/usr/local/lib/android/sdk/ndk/25.1.8937393/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar"

          [target.aarch64-linux-android]
          linker = "/usr/local/lib/android/sdk/ndk/25.1.8937393/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android24-clang"
          ar = "/usr/local/lib/android/sdk/ndk/25.1.8937393/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar"
          rustflags = ["-C", "link-arg=-Wl,--fix-cortex-a53-843419=off"]
          EOF

      # Rust cache
      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"

      # Sync node version and setup cache
      - name: Sync node version and setup cache
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"

        # Install yarn globally
      - name: Install pnpm
        run: npm install -g yarn

      # Install frontend dependencies
      - name: Install frontend dependencies
        run: yarn install

      # 修改版本号生成逻辑
      - name: Get date and run number
        id: version # 添加id属性
        run: |
          echo "bundle_version=0.0.${{ github.run_number }}" >> $GITHUB_OUTPUT

      - name: Android init
        run: |
          # 显示 NDK 路径
          echo "NDK_HOME: $NDK_HOME"
          echo "ANDROID_NDK_HOME: $ANDROID_NDK_HOME"
          # 初始化 Android 环境
          yarn run tauri android init

      - name: Android build
        run: |
          # Build Android app for two architectures individually
          RUST_BACKTRACE=1 yarn run tauri android build --target armv7 --apk
          RUST_BACKTRACE=1 yarn run tauri android build --target aarch64 --apk

      # 添加发布到GitHub Release的步骤
      - name: Create Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            src-tauri/target/android/**/*.apk
            src-tauri/target/android/**/*.aab
          name: Release ${{ github.ref_name }}
          body: |
            Android 应用版本 ${{ steps.version.outputs.bundle_version }}

            自动构建发布
