name: Android
on:
  push:
    branches: [master]
  workflow_dispatch:

jobs:
  release:
    permissions:
      contents: write
      actions: write
      attestations: write
      deployments: write
      packages: write
      id-token: write
    strategy:
      matrix:
        include:
          - platform: "windows-latest"
            args: "--target armv7-linux-androideabi,aarch64-linux-android" # 添加多架构支持

    runs-on: ${{ matrix.platform }}

    steps:
      # Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 获取完整历史以便正确生成版本号

      # Rust setup
      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable

      # Rust cache
      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"

      # 添加 Android 目标支持
      - name: Add Android targets
        run: |
          rustup target add armv7-linux-androideabi
          rustup target add aarch64-linux-android

      # Sync node version and setup cache
      - name: Sync node version and setup cache
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
          cache: "yarn" # 启用 yarn 缓存

      # Install yarn globally
      - name: Install yarn
        run: npm install -g yarn

      # 缓存 node_modules
      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-modules-

      # Install frontend dependencies
      - name: Install frontend dependencies
        run: yarn install

      # 缓存 vcpkg
      - name: Cache vcpkg
        uses: actions/cache@v3
        with:
          path: |
            vcpkg
            ${{ github.workspace }}/vcpkg
          key: ${{ runner.os }}-vcpkg-${{ hashFiles('**/vcpkg.json', '**/vcpkg.lock') || github.run_id }}
          restore-keys: |
            ${{ runner.os }}-vcpkg-

      # Windows 环境不需要安装 Ubuntu 特定的依赖
      # 安装 Windows 上需要的依赖
      - name: Install Windows dependencies
        run: |
          choco install openssl
          # 安装 vcpkg 以便更好地管理 C/C++ 库
          if (-not (Test-Path vcpkg)) {
            git clone https://github.com/microsoft/vcpkg.git
            cd vcpkg
            .\bootstrap-vcpkg.bat
          } else {
            cd vcpkg
          }
          .\vcpkg.exe install openssl:x64-windows
          echo "VCPKG_ROOT=$pwd" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"
          # 移除 gradle 缓存配置，因为项目中可能没有标准的 gradle 文件
          # cache: 'gradle'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v2

      # 添加 NDK 安装步骤
      - name: Install Android NDK
        run: |
          # 检查 NDK 是否已存在
          if (-not (Test-Path "$env:ANDROID_HOME\ndk\25.1.8937393")) {
            # 使用 cmdline-tools 安装 NDK
            & "$env:ANDROID_HOME\cmdline-tools\latest\bin\sdkmanager.bat" --install "ndk;25.1.8937393" --sdk_root="$env:ANDROID_HOME"
          }
          # 设置 NDK_HOME 环境变量
          echo "NDK_HOME=$env:ANDROID_HOME\ndk\25.1.8937393" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "ANDROID_NDK_HOME=$env:ANDROID_HOME\ndk\25.1.8937393" | Out-File -FilePath $env:GITHUB_ENV -Append

      # 修改版本号生成逻辑
      - name: Get date and run number
        id: version # 添加id属性
        run: |
          echo "bundle_version=0.0.${{ github.run_number }}" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Android init
        run: |
          # 显示 NDK 路径
          echo "NDK_HOME: $env:NDK_HOME"
          echo "ANDROID_NDK_HOME: $env:ANDROID_NDK_HOME"
          # 初始化 Android 环境
          yarn run tauri android init

      # 修改 Android build 步骤
      - name: Android build
        run: |
          # 设置 OpenSSL 环境变量 (Windows 路径)
          $env:OPENSSL_DIR = "$env:VCPKG_ROOT\installed\x64-windows"
          $env:OPENSSL_LIB_DIR = "$env:VCPKG_ROOT\installed\x64-windows\lib"
          $env:OPENSSL_INCLUDE_DIR = "$env:VCPKG_ROOT\installed\x64-windows\include"

          # 为交叉编译设置环境变量
          $env:OPENSSL_STATIC = "true"

          # 显示环境变量
          echo "OPENSSL_DIR: $env:OPENSSL_DIR"
          echo "OPENSSL_LIB_DIR: $env:OPENSSL_LIB_DIR"
          echo "OPENSSL_INCLUDE_DIR: $env:OPENSSL_INCLUDE_DIR"

          # 构建 Android 应用
          yarn run tauri android build

      # 添加发布到GitHub Release的步骤
      - name: Create Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            src-tauri/target/android/**/*.apk
            src-tauri/target/android/**/*.aab
          name: Release ${{ github.ref_name }}
          body: |
            Android 应用版本 ${{ steps.version.outputs.bundle_version }}

            自动构建发布
